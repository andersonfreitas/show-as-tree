#!/usr/bin/env python
import wx
import sys
import fileinput

def todict(X):
    d = {}
    for path in X:
        current_level = d
        for part in path:
            if part not in current_level:
                current_level[part] = {}
            current_level = current_level[part]
    return d

class TreeFrame(wx.Frame):
  def __init__(self):
    wx.Frame.__init__(self, None, title='show as tree',size=(400,600))

    tree_ctrl = wx.TreeCtrl(self, -1, style=wx.TR_DEFAULT_STYLE | \
        wx.TR_FULL_ROW_HIGHLIGHT | \
        wx.TR_EDIT_LABELS | wx.TR_HIDE_ROOT)

    root = tree_ctrl.AddRoot('/')

    def append(base, lst):
      for k, v in lst.iteritems():
        sub = tree_ctrl.AppendItem(base, k)
        append(sub, v)

    append(root, structure)

    #tree_ctrl.ExpandAll()
    self.Centre()
    tree_ctrl.Bind(wx.EVT_KEY_UP, self.OnKeyUp)
    
  def OnKeyUp(self, event):
    keyCode = event.GetKeyCode()
    if keyCode == wx.WXK_ESCAPE:
      self.Close()

class MyApp(wx.App):
  def OnInit(self):
    self.frame = TreeFrame()
    self.frame.Show(True)
    self.SetTopWindow(self.frame)
    return True

if __name__ == '__main__':
  lines = fileinput.input()

  dirs = []
  for l in lines:
    dirs.append(filter(lambda x: len(x) > 0, l.replace('\n', '')[0:].split('/')))
  structure = todict(dirs)

  app = MyApp(0)
  app.MainLoop()
